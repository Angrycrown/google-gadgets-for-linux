#summary How to build this project
#labels Featured,Phase-Deploy

= Introduction =

This page describe the method of building Google Gadgets for Linux from source code.

There are two different build systems can be used to build this project, autoconf/automake and cmake. But currently, cmake is only for internal testing build. Normal users should always use autoconf/automake build system.


= Details =

== Prepare the source code ==
You can get the source code from the svn repository. Please follow the instruction on [http://code.google.com/p/google-gadgets-for-linux/source Source] page to check it out.

For end users, the best way is to download a release source package from our [http://code.google.com/p/google-gadgets-for-linux/downloads/list download] page.


== Build with autoconf/automake ==

=== Pre-requirements ===
You need install following packages in order to prepare and build the source code.
 * [http://www.gnu.org/software/autoconf/ autoconf] >= 2.50 
 * [http://www.gnu.org/software/automake/ automake] >= 1.9
 * [http://www.gnu.org/software/libtool libtool] >= 1.5.20

This project also depends on the following libraries:
 * [http://www.mozilla.org/js/spidermonkey/ SpiderMonkey] >= 1.60
 * [http://curl.haxx.se/ libcurl] >= 7.16.0
 * [http://xmlsoft.org libxml2] >= 2.6.0
 * [http://cairographics.org cairo] >= 1.0.0, 1.2.0 or above is better.
 * [http://www.gtk.org gtk] >= 2.8.0, 2.10.0 or above is better.
 * [http://www.zlib.net zlib] >= 1.2.0
 * [http://www.mozilla.org xulrunner] >= 1.8
 * [http://trolltech.com Qt and QtWebKit] >= 4.3, optional, 4.4 is better.

These packages are included in most modern Linux distributions, you can install them using software management application provided by the distribution.

=== Prepare build environment ===
This step is only necessary if you checked out the source code from svn repository directly.

Change to the root directory of the source code, then run:
{{{
sh autotools/bootstrap.sh
}}}

If everything is ok, a configure script will be generated in current directory. Then you can start to configure and build. Otherwise please check if there is some package missing in your system or the version is too low, especailly autoconf, automake and libtool packages.

=== Configure and build ===
autoconf/automake supports building inside source tree and outside source tree. We suggest to build outside source tree.
You can create a directory and build it in that directory, then all files will be output into that directory. The source tree won't be touched at all.
Following commands configure and build Google Gadgets for Linux in build/debug directory with default configure options.
{{{
$ mkdir -p build/debug
$ cd build/debug
$ ../../configure --enable-debug
$ make
}}}

The configure script has many options that you can use, use command:
{{{
../../configure --help
}}}
To get a detailed list.
For example, if the spidermonkey library was not installed into system standard library directory, you may want to use --with-smjs-incdir and --with-smjs-libdir options to specify the include and library directory of installed spidermonkey library.

If you don't specify any configure option, the configure script will determine the optimal options automatically.

Note: the debug build contains extra code only for debugging purpose, like debug logs. It will affect the runtime performance and increase the code size. Normally it's not necessary for ordinary users.

=== Install, run and do unit tests ===
If the configure and build finished successfully, you can either install it or run it directly.

Use command:
{{{
$ make install
}}}
to install google gadgets for linux into the default installation directory, /usr/local. Use --prefix configure option to change the default directory. You may need root privilege to do installation.

If you want to make a binary package instead of installing it into system, you may use this command:
{{{
$ make DESTDIR=</tmp/ggl-root> install
}}}
Then all things will be installed into /tmp/ggl-root directory. Then you can just pack everything in this directory altogether into a package.


Currently there are two runnable binaries:

 * ggl-gtk  A host based on Gtk widget libraries.
 * ggl-qt  A host based on Qt widget libraries.

They have identical functionalities, you can choose either one. However for now, ggl-gtk is more mature than ggl-qt.
You can just run them from command line. Use -bg option to turn them into background mode. -h option can print a brief description for available command options.


If you want to run all unit tests, just use this command:
{{{
$ make check
}}}
Ordinary users are not necessary to run unit tests.

=== Useful configure options ===
 * --prefix=PREFIX
  specify the installation directory. By default, it's /usr/local
 * --enable-debug
  Turn on debug compile options 
 * --with-memcheck-command=CMD
  specify a memory check command for running unit tests. For example, valgrind can be specified to check memory leak.
 * --with-zlib-libdir=DIR
  specify where to find zlib library
 * --with-zlib-incdir=DIR
  specify where to find zlib header files
 * --with-libcurl=DIR
  look for the curl library in DIR
 * --with-xml-prefix=PFX
  Prefix where libxml is installed (optional)
 * --with-xml-exec-prefix=PFX
  Exec prefix where libxml is installed (optional)
 * --with-smjs-cppflags=CPPFLAGS
  specify optional C precompile flags for spidermonkey library. JS_THREADSAFE flag will be detected automatically.
 * --with-smjs-libdir=DIR
  specify where to find spidermonkey library
 * --with-smjs-incdir=DIR
  specify where to find spidermonkey header files

There are many options to let you enable/disable individual component. for example, if you don't want Qt support, then you may want to use the following options:
 * --disable-libggadget-qt
 * --disable-qt-system-framework
 * --disable-qtwebkit-browser-element
 * --disable-qt-host

Use option --help to get a complete list of configure options.