/*
  Copyright 2007 Google Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

// This file is automatically generated on 07/18/2007 by command
// 'gen_gunit_pred_impl.py 5'.  Do not edit by hand!

// Implements a family of generic predicate assertion macros.
//

#ifndef TESTING_GUNIT_PRED_IMPL_H__
#define TESTING_GUNIT_PRED_IMPL_H__

// Makes sure this header is not included before gunit.h.
#ifndef TESTING_GUNIT_H__
#error Do not include gunit_pred_impl.h directly.  Include gunit.h instead.
#endif  // TESTING_GUNIT_H__

// This header implements a family of generic predicate assertion
// macros:
//
//   ASSERT_PRED_FORMAT1(pred_format, v1)
//   ASSERT_PRED_FORMAT2(pred_format, v1, v2)
//   ...
//
// where pred_format is a function or functor that takes n (in the
// case of ASSERT_PRED_FORMATn) values and their source expression
// text, and returns a testing::AssertionResult.  See the definition
// of ASSERT_EQ in gunit.h for an example.
//
// If you don't care about formatting, you can use the more
// restrictive version:
//
//   ASSERT_PRED1(pred, v1)
//   ASSERT_PRED2(pred, v1, v2)
//   ...
//
// where pred is an n-ary function or functor that returns bool,
// and the values v1, v2, ..., must support the << operator for
// streaming to std::ostream.
//
// We also define the EXPECT_* variations.

// GUNIT_ASSERT is the basic statement to which all of the assertions
// in this file reduce.  Don't use this in your code.

#define GUNIT_ASSERT(expression, on_failure) \
  if (const ::testing::AssertionResult gunit_ar = (expression)) \
    ; \
  else \
    on_failure(gunit_ar.failure_message())


// Helper function for implementing {EXPECT|ASSERT}_PRED1.  Don't use
// this in your code.
template <typename Pred,
          typename T1>
AssertionResult AssertPred1Helper(const char* pred_text,
                                  const char* e1,
                                  Pred pred,
                                  const T1& v1) {
  if (pred(v1)) return AssertionSuccess();

  Message msg;
  msg << pred_text << "("
      << e1 << ") evaluates to false, where"
      << "\n" << e1 << " evaluates to " << v1;
  return AssertionFailure(msg);
}

// Internal macro for implementing {EXPECT|ASSERT}_PRED_FORMAT1.
// Don't use this in your code.
#define GUNIT_PRED_FORMAT1(pred_format, v1, on_failure)\
  GUNIT_ASSERT(pred_format(#v1, v1),\
               on_failure)

// Internal macro for implementing {EXPECT|ASSERT}_PRED1.  Don't use
// this in your code.
#define GUNIT_PRED1(pred, v1, on_failure)\
  GUNIT_ASSERT(::testing::AssertPred1Helper(#pred, \
                                 #v1, \
                                 pred, \
                                 v1), on_failure)

// Unary predicate assertion macros.
#define EXPECT_PRED_FORMAT1(pred_format, v1) \
  GUNIT_PRED_FORMAT1(pred_format, v1, GUNIT_NONFATAL_FAILURE)
#define EXPECT_PRED1(pred, v1) \
  GUNIT_PRED1(pred, v1, GUNIT_NONFATAL_FAILURE)
#define ASSERT_PRED_FORMAT1(pred_format, v1) \
  GUNIT_PRED_FORMAT1(pred_format, v1, GUNIT_FATAL_FAILURE)
#define ASSERT_PRED1(pred, v1) \
  GUNIT_PRED1(pred, v1, GUNIT_FATAL_FAILURE)



// Helper function for implementing {EXPECT|ASSERT}_PRED2.  Don't use
// this in your code.
template <typename Pred,
          typename T1,
          typename T2>
AssertionResult AssertPred2Helper(const char* pred_text,
                                  const char* e1,
                                  const char* e2,
                                  Pred pred,
                                  const T1& v1,
                                  const T2& v2) {
  if (pred(v1, v2)) return AssertionSuccess();

  Message msg;
  msg << pred_text << "("
      << e1 << ", "
      << e2 << ") evaluates to false, where"
      << "\n" << e1 << " evaluates to " << v1
      << "\n" << e2 << " evaluates to " << v2;
  return AssertionFailure(msg);
}

// Internal macro for implementing {EXPECT|ASSERT}_PRED_FORMAT2.
// Don't use this in your code.
#define GUNIT_PRED_FORMAT2(pred_format, v1, v2, on_failure)\
  GUNIT_ASSERT(pred_format(#v1, #v2, v1, v2),\
               on_failure)

// Internal macro for implementing {EXPECT|ASSERT}_PRED2.  Don't use
// this in your code.
#define GUNIT_PRED2(pred, v1, v2, on_failure)\
  GUNIT_ASSERT(::testing::AssertPred2Helper(#pred, \
                                 #v1, \
                                 #v2, \
                                 pred, \
                                 v1, \
                                 v2), on_failure)

// Binary predicate assertion macros.
#define EXPECT_PRED_FORMAT2(pred_format, v1, v2) \
  GUNIT_PRED_FORMAT2(pred_format, v1, v2, GUNIT_NONFATAL_FAILURE)
#define EXPECT_PRED2(pred, v1, v2) \
  GUNIT_PRED2(pred, v1, v2, GUNIT_NONFATAL_FAILURE)
#define ASSERT_PRED_FORMAT2(pred_format, v1, v2) \
  GUNIT_PRED_FORMAT2(pred_format, v1, v2, GUNIT_FATAL_FAILURE)
#define ASSERT_PRED2(pred, v1, v2) \
  GUNIT_PRED2(pred, v1, v2, GUNIT_FATAL_FAILURE)



// Helper function for implementing {EXPECT|ASSERT}_PRED3.  Don't use
// this in your code.
template <typename Pred,
          typename T1,
          typename T2,
          typename T3>
AssertionResult AssertPred3Helper(const char* pred_text,
                                  const char* e1,
                                  const char* e2,
                                  const char* e3,
                                  Pred pred,
                                  const T1& v1,
                                  const T2& v2,
                                  const T3& v3) {
  if (pred(v1, v2, v3)) return AssertionSuccess();

  Message msg;
  msg << pred_text << "("
      << e1 << ", "
      << e2 << ", "
      << e3 << ") evaluates to false, where"
      << "\n" << e1 << " evaluates to " << v1
      << "\n" << e2 << " evaluates to " << v2
      << "\n" << e3 << " evaluates to " << v3;
  return AssertionFailure(msg);
}

// Internal macro for implementing {EXPECT|ASSERT}_PRED_FORMAT3.
// Don't use this in your code.
#define GUNIT_PRED_FORMAT3(pred_format, v1, v2, v3, on_failure)\
  GUNIT_ASSERT(pred_format(#v1, #v2, #v3, v1, v2, v3),\
               on_failure)

// Internal macro for implementing {EXPECT|ASSERT}_PRED3.  Don't use
// this in your code.
#define GUNIT_PRED3(pred, v1, v2, v3, on_failure)\
  GUNIT_ASSERT(::testing::AssertPred3Helper(#pred, \
                                 #v1, \
                                 #v2, \
                                 #v3, \
                                 pred, \
                                 v1, \
                                 v2, \
                                 v3), on_failure)

// Ternary predicate assertion macros.
#define EXPECT_PRED_FORMAT3(pred_format, v1, v2, v3) \
  GUNIT_PRED_FORMAT3(pred_format, v1, v2, v3, GUNIT_NONFATAL_FAILURE)
#define EXPECT_PRED3(pred, v1, v2, v3) \
  GUNIT_PRED3(pred, v1, v2, v3, GUNIT_NONFATAL_FAILURE)
#define ASSERT_PRED_FORMAT3(pred_format, v1, v2, v3) \
  GUNIT_PRED_FORMAT3(pred_format, v1, v2, v3, GUNIT_FATAL_FAILURE)
#define ASSERT_PRED3(pred, v1, v2, v3) \
  GUNIT_PRED3(pred, v1, v2, v3, GUNIT_FATAL_FAILURE)



// Helper function for implementing {EXPECT|ASSERT}_PRED4.  Don't use
// this in your code.
template <typename Pred,
          typename T1,
          typename T2,
          typename T3,
          typename T4>
AssertionResult AssertPred4Helper(const char* pred_text,
                                  const char* e1,
                                  const char* e2,
                                  const char* e3,
                                  const char* e4,
                                  Pred pred,
                                  const T1& v1,
                                  const T2& v2,
                                  const T3& v3,
                                  const T4& v4) {
  if (pred(v1, v2, v3, v4)) return AssertionSuccess();

  Message msg;
  msg << pred_text << "("
      << e1 << ", "
      << e2 << ", "
      << e3 << ", "
      << e4 << ") evaluates to false, where"
      << "\n" << e1 << " evaluates to " << v1
      << "\n" << e2 << " evaluates to " << v2
      << "\n" << e3 << " evaluates to " << v3
      << "\n" << e4 << " evaluates to " << v4;
  return AssertionFailure(msg);
}

// Internal macro for implementing {EXPECT|ASSERT}_PRED_FORMAT4.
// Don't use this in your code.
#define GUNIT_PRED_FORMAT4(pred_format, v1, v2, v3, v4, on_failure)\
  GUNIT_ASSERT(pred_format(#v1, #v2, #v3, #v4, v1, v2, v3, v4),\
               on_failure)

// Internal macro for implementing {EXPECT|ASSERT}_PRED4.  Don't use
// this in your code.
#define GUNIT_PRED4(pred, v1, v2, v3, v4, on_failure)\
  GUNIT_ASSERT(::testing::AssertPred4Helper(#pred, \
                                 #v1, \
                                 #v2, \
                                 #v3, \
                                 #v4, \
                                 pred, \
                                 v1, \
                                 v2, \
                                 v3, \
                                 v4), on_failure)

// 4-ary predicate assertion macros.
#define EXPECT_PRED_FORMAT4(pred_format, v1, v2, v3, v4) \
  GUNIT_PRED_FORMAT4(pred_format, v1, v2, v3, v4, GUNIT_NONFATAL_FAILURE)
#define EXPECT_PRED4(pred, v1, v2, v3, v4) \
  GUNIT_PRED4(pred, v1, v2, v3, v4, GUNIT_NONFATAL_FAILURE)
#define ASSERT_PRED_FORMAT4(pred_format, v1, v2, v3, v4) \
  GUNIT_PRED_FORMAT4(pred_format, v1, v2, v3, v4, GUNIT_FATAL_FAILURE)
#define ASSERT_PRED4(pred, v1, v2, v3, v4) \
  GUNIT_PRED4(pred, v1, v2, v3, v4, GUNIT_FATAL_FAILURE)



// Helper function for implementing {EXPECT|ASSERT}_PRED5.  Don't use
// this in your code.
template <typename Pred,
          typename T1,
          typename T2,
          typename T3,
          typename T4,
          typename T5>
AssertionResult AssertPred5Helper(const char* pred_text,
                                  const char* e1,
                                  const char* e2,
                                  const char* e3,
                                  const char* e4,
                                  const char* e5,
                                  Pred pred,
                                  const T1& v1,
                                  const T2& v2,
                                  const T3& v3,
                                  const T4& v4,
                                  const T5& v5) {
  if (pred(v1, v2, v3, v4, v5)) return AssertionSuccess();

  Message msg;
  msg << pred_text << "("
      << e1 << ", "
      << e2 << ", "
      << e3 << ", "
      << e4 << ", "
      << e5 << ") evaluates to false, where"
      << "\n" << e1 << " evaluates to " << v1
      << "\n" << e2 << " evaluates to " << v2
      << "\n" << e3 << " evaluates to " << v3
      << "\n" << e4 << " evaluates to " << v4
      << "\n" << e5 << " evaluates to " << v5;
  return AssertionFailure(msg);
}

// Internal macro for implementing {EXPECT|ASSERT}_PRED_FORMAT5.
// Don't use this in your code.
#define GUNIT_PRED_FORMAT5(pred_format, v1, v2, v3, v4, v5, on_failure)\
  GUNIT_ASSERT(pred_format(#v1, #v2, #v3, #v4, #v5, v1, v2, v3, v4, v5),\
               on_failure)

// Internal macro for implementing {EXPECT|ASSERT}_PRED5.  Don't use
// this in your code.
#define GUNIT_PRED5(pred, v1, v2, v3, v4, v5, on_failure)\
  GUNIT_ASSERT(::testing::AssertPred5Helper(#pred, \
                                 #v1, \
                                 #v2, \
                                 #v3, \
                                 #v4, \
                                 #v5, \
                                 pred, \
                                 v1, \
                                 v2, \
                                 v3, \
                                 v4, \
                                 v5), on_failure)

// 5-ary predicate assertion macros.
#define EXPECT_PRED_FORMAT5(pred_format, v1, v2, v3, v4, v5) \
  GUNIT_PRED_FORMAT5(pred_format, v1, v2, v3, v4, v5, GUNIT_NONFATAL_FAILURE)
#define EXPECT_PRED5(pred, v1, v2, v3, v4, v5) \
  GUNIT_PRED5(pred, v1, v2, v3, v4, v5, GUNIT_NONFATAL_FAILURE)
#define ASSERT_PRED_FORMAT5(pred_format, v1, v2, v3, v4, v5) \
  GUNIT_PRED_FORMAT5(pred_format, v1, v2, v3, v4, v5, GUNIT_FATAL_FAILURE)
#define ASSERT_PRED5(pred, v1, v2, v3, v4, v5) \
  GUNIT_PRED5(pred, v1, v2, v3, v4, v5, GUNIT_FATAL_FAILURE)



#endif  // TESTING_BASE_GUNIT_PRED_IMPL_H__
